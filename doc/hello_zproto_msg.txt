hello_zproto_msg(3)
=============

NAME
----
hello_zproto_msg - hello_zproto example protocol

SYNOPSIS
--------
----
//  Create a new hello_zproto_msg
hello_zproto_msg_t *
    hello_zproto_msg_new (int id);

//  Destroy the hello_zproto_msg
void
    hello_zproto_msg_destroy (hello_zproto_msg_t **self_p);

//  Receive and parse a hello_zproto_msg from the input
hello_zproto_msg_t *
    hello_zproto_msg_recv (void *input);

//  Send the hello_zproto_msg to the output, and destroy it
int
    hello_zproto_msg_send (hello_zproto_msg_t **self_p, void *output);

//  Send the hello_zproto_msg to the output, and do not destroy it
int
    hello_zproto_msg_send_again (hello_zproto_msg_t *self, void *output);

//  Send the LOG to the output in one step
int
    hello_zproto_msg_send_log (void *output,
        uint16_t sequence,
        byte level,
        byte event,
        uint16_t node,
        uint16_t peer,
        uint64_t time,
        char *data);
    
//  Send the STRUCTURES to the output in one step
int
    hello_zproto_msg_send_structures (void *output,
        uint16_t sequence,
        zlist_t *aliases,
        zhash_t *headers);
    
//  Send the BINARY to the output in one step
int
    hello_zproto_msg_send_binary (void *output,
        uint16_t sequence,
        byte *flags,
        zframe_t *address,
        zmsg_t *content);
    
//  Duplicate the hello_zproto_msg message
hello_zproto_msg_t *
    hello_zproto_msg_dup (hello_zproto_msg_t *self);

//  Print contents of message to stdout
void
    hello_zproto_msg_dump (hello_zproto_msg_t *self);

//  Get/set the message routing id
zframe_t *
    hello_zproto_msg_routing_id (hello_zproto_msg_t *self);
void
    hello_zproto_msg_set_routing_id (hello_zproto_msg_t *self, zframe_t *routing_id);

//  Get the hello_zproto_msg id and printable command
int
    hello_zproto_msg_id (hello_zproto_msg_t *self);
void
    hello_zproto_msg_set_id (hello_zproto_msg_t *self, int id);
char *
    hello_zproto_msg_command (hello_zproto_msg_t *self);

//  Get/set the sequence field
uint16_t
    hello_zproto_msg_sequence (hello_zproto_msg_t *self);
void
    hello_zproto_msg_set_sequence (hello_zproto_msg_t *self, uint16_t sequence);

//  Get/set the level field
byte
    hello_zproto_msg_level (hello_zproto_msg_t *self);
void
    hello_zproto_msg_set_level (hello_zproto_msg_t *self, byte level);

//  Get/set the event field
byte
    hello_zproto_msg_event (hello_zproto_msg_t *self);
void
    hello_zproto_msg_set_event (hello_zproto_msg_t *self, byte event);

//  Get/set the node field
uint16_t
    hello_zproto_msg_node (hello_zproto_msg_t *self);
void
    hello_zproto_msg_set_node (hello_zproto_msg_t *self, uint16_t node);

//  Get/set the peer field
uint16_t
    hello_zproto_msg_peer (hello_zproto_msg_t *self);
void
    hello_zproto_msg_set_peer (hello_zproto_msg_t *self, uint16_t peer);

//  Get/set the time field
uint64_t
    hello_zproto_msg_time (hello_zproto_msg_t *self);
void
    hello_zproto_msg_set_time (hello_zproto_msg_t *self, uint64_t time);

//  Get/set the data field
char *
    hello_zproto_msg_data (hello_zproto_msg_t *self);
void
    hello_zproto_msg_set_data (hello_zproto_msg_t *self, char *format, ...);

//  Get/set the aliases field
zlist_t *
    hello_zproto_msg_aliases (hello_zproto_msg_t *self);
void
    hello_zproto_msg_set_aliases (hello_zproto_msg_t *self, zlist_t *aliases);

//  Iterate through the aliases field, and append a aliases value
char *
    hello_zproto_msg_aliases_first (hello_zproto_msg_t *self);
char *
    hello_zproto_msg_aliases_next (hello_zproto_msg_t *self);
void
    hello_zproto_msg_aliases_append (hello_zproto_msg_t *self, char *format, ...);
size_t
    hello_zproto_msg_aliases_size (hello_zproto_msg_t *self);

//  Get/set the headers field
zhash_t *
    hello_zproto_msg_headers (hello_zproto_msg_t *self);
void
    hello_zproto_msg_set_headers (hello_zproto_msg_t *self, zhash_t *headers);
    
//  Get/set a value in the headers dictionary
char *
    hello_zproto_msg_headers_string (hello_zproto_msg_t *self, char *key, char *default_value);
uint64_t
    hello_zproto_msg_headers_number (hello_zproto_msg_t *self, char *key, uint64_t default_value);
void
    hello_zproto_msg_headers_insert (hello_zproto_msg_t *self, char *key, char *format, ...);
size_t
    hello_zproto_msg_headers_size (hello_zproto_msg_t *self);

//  Get/set the flags field
byte *
    hello_zproto_msg_flags (hello_zproto_msg_t *self);
void
    hello_zproto_msg_set_flags (hello_zproto_msg_t *self, byte *flags);

//  Get/set the address field
zframe_t *
    hello_zproto_msg_address (hello_zproto_msg_t *self);
void
    hello_zproto_msg_set_address (hello_zproto_msg_t *self, zframe_t *frame);

//  Get/set the content field
zmsg_t *
    hello_zproto_msg_content (hello_zproto_msg_t *self);
void
    hello_zproto_msg_set_content (hello_zproto_msg_t *self, zmsg_t *msg);

//  Self test of this class
int
    hello_zproto_msg_test (bool verbose);
----

DESCRIPTION
-----------

hello_zproto_msg - hello_zproto example protocol


EXAMPLE
-------
.From hello_zproto_msg_test method
----
    //  Simple create/destroy test
    hello_zproto_msg_t *self = hello_zproto_msg_new (0);
    assert (self);
    hello_zproto_msg_destroy (&self);

    //  Create pair of sockets we can send through
    zctx_t *ctx = zctx_new ();
    assert (ctx);

    void *output = zsocket_new (ctx, ZMQ_DEALER);
    assert (output);
    zsocket_bind (output, "inproc://selftest");
    void *input = zsocket_new (ctx, ZMQ_ROUTER);
    assert (input);
    zsocket_connect (input, "inproc://selftest");
    
    //  Encode/send/decode and verify each message type
    int instance;
    hello_zproto_msg_t *copy;
    self = hello_zproto_msg_new (HELLO_ZPROTO_MSG_LOG);
    
    //  Check that _dup works on empty message
    copy = hello_zproto_msg_dup (self);
    assert (copy);
    hello_zproto_msg_destroy (&copy);

    hello_zproto_msg_set_sequence (self, 123);
    hello_zproto_msg_set_level (self, 123);
    hello_zproto_msg_set_event (self, 123);
    hello_zproto_msg_set_node (self, 123);
    hello_zproto_msg_set_peer (self, 123);
    hello_zproto_msg_set_time (self, 123);
    hello_zproto_msg_set_data (self, "Life is short but Now lasts for ever");
    //  Send twice from same object
    hello_zproto_msg_send_again (self, output);
    hello_zproto_msg_send (&self, output);

    for (instance = 0; instance < 2; instance++) {
        self = hello_zproto_msg_recv (input);
        assert (self);
        
        assert (hello_zproto_msg_sequence (self) == 123);
        assert (hello_zproto_msg_level (self) == 123);
        assert (hello_zproto_msg_event (self) == 123);
        assert (hello_zproto_msg_node (self) == 123);
        assert (hello_zproto_msg_peer (self) == 123);
        assert (hello_zproto_msg_time (self) == 123);
        assert (streq (hello_zproto_msg_data (self), "Life is short but Now lasts for ever"));
        hello_zproto_msg_destroy (&self);
    }
    self = hello_zproto_msg_new (HELLO_ZPROTO_MSG_STRUCTURES);
    
    //  Check that _dup works on empty message
    copy = hello_zproto_msg_dup (self);
    assert (copy);
    hello_zproto_msg_destroy (&copy);

    hello_zproto_msg_set_sequence (self, 123);
    hello_zproto_msg_aliases_append (self, "Name: %s", "Brutus");
    hello_zproto_msg_aliases_append (self, "Age: %d", 43);
    hello_zproto_msg_headers_insert (self, "Name", "Brutus");
    hello_zproto_msg_headers_insert (self, "Age", "%d", 43);
    //  Send twice from same object
    hello_zproto_msg_send_again (self, output);
    hello_zproto_msg_send (&self, output);

    for (instance = 0; instance < 2; instance++) {
        self = hello_zproto_msg_recv (input);
        assert (self);
        
        assert (hello_zproto_msg_sequence (self) == 123);
        assert (hello_zproto_msg_aliases_size (self) == 2);
        assert (streq (hello_zproto_msg_aliases_first (self), "Name: Brutus"));
        assert (streq (hello_zproto_msg_aliases_next (self), "Age: 43"));
        assert (hello_zproto_msg_headers_size (self) == 2);
        assert (streq (hello_zproto_msg_headers_string (self, "Name", "?"), "Brutus"));
        assert (hello_zproto_msg_headers_number (self, "Age", 0) == 43);
        hello_zproto_msg_destroy (&self);
    }
    self = hello_zproto_msg_new (HELLO_ZPROTO_MSG_BINARY);
    
    //  Check that _dup works on empty message
    copy = hello_zproto_msg_dup (self);
    assert (copy);
    hello_zproto_msg_destroy (&copy);

    hello_zproto_msg_set_sequence (self, 123);
    byte flags_data [HELLO_ZPROTO_MSG_FLAGS_SIZE];
    memset (flags_data, 123, HELLO_ZPROTO_MSG_FLAGS_SIZE);
    hello_zproto_msg_set_flags (self, flags_data);
    hello_zproto_msg_set_address (self, zframe_new ("Captcha Diem", 12));
    hello_zproto_msg_set_content (self, zmsg_new ());
//    zmsg_addstr (hello_zproto_msg_content (self), "Hello, World");
    //  Send twice from same object
    hello_zproto_msg_send_again (self, output);
    hello_zproto_msg_send (&self, output);

    for (instance = 0; instance < 2; instance++) {
        self = hello_zproto_msg_recv (input);
        assert (self);
        
        assert (hello_zproto_msg_sequence (self) == 123);
        assert (hello_zproto_msg_flags (self) [0] == 123);
        assert (hello_zproto_msg_flags (self) [HELLO_ZPROTO_MSG_FLAGS_SIZE - 1] == 123);
        assert (zframe_streq (hello_zproto_msg_address (self), "Captcha Diem"));
        assert (zmsg_size (hello_zproto_msg_content (self)) == 0);
        hello_zproto_msg_destroy (&self);
    }

    zctx_destroy (&ctx);
----

SEE ALSO
--------
link:proto[7]
